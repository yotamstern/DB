import multiprocessing
from SyncDB import SyncDatabase

class Test:
    """
    A class to test multiprocessing functionality with a synchronized database.

    Attributes:
        processes (list): A list to hold the multiprocessing Process objects.
        db (SyncDatabase): An instance of the synchronized database.
    """
    
    def __init__(self):
        """
        Initializes the Test class with a database instance and a process list.
        """
        self.processes = []  # List to keep track of active processes
        self.db = SyncDatabase("database.pkl", "processes")  # Initialize the database with file and name

    def number1(self):
        """
        Sets a key-value pair ('cyber', 'cool') in the database.
        """
        self.db.set_value('cyber', 'cool')

    def number2(self):
        """
        Retrieves the value associated with the key 'cyber' from the database.
        Returns:
            str: The value stored in the database for the key 'cyber'.
        """
        return self.db.get_value('cyber')

    def number3(self):
        """
        Demonstrates multiprocessing with one process getting a value and another setting a value in the database.
        """
        process1 = multiprocessing.Process(target=self.db.get_value, args=('cyber',))  # Retrieve the value of 'cyber'
        process2 = multiprocessing.Process(target=self.db.set_value, args=('database', 'test'))  # Set a new key-value pair
        process1.start()  # Start the first process
        self.processes.append(process1)  # Keep track of the process
        process2.start()  # Start the second process
        self.processes.append(process2)  # Keep track of the process

        for p in self.processes:  # Ensure all processes complete before moving on
            p.join()

    def number4(self):
        """
        Demonstrates multiprocessing with one process setting a value and another retrieving it.
        """
        process1 = multiprocessing.Process(target=self.db.set_value, args=('beginning', "ending"))  # Set a key-value pair
        process2 = multiprocessing.Process(target=self.db.get_value, args=('beginning',))  # Retrieve the value
        process1.start()  # Start the first process
        self.processes.append(process1)  # Track the process
        process2.start()  # Start the second process
        self.processes.append(process2)  # Track the process

        for p in self.processes:  # Wait for all processes to complete
            p.join()

    def number5(self):
        """
        Launches multiple processes (8 in this case) to retrieve the value associated with the key 'cyber'.
        """
        for i in range(8):  # Launch 8 processes
            process = multiprocessing.Process(target=self.db.get_value, args=('cyber',))  # Retrieve the value of 'cyber'
            process.start()  # Start the process
            self.processes.append(process)  # Track the process

    def number6(self):
        """
        Combines multiple readers and a writer process. First, launches 8 processes to retrieve a value,
        then starts a writer process to update the value, and finally launches 8 more reader processes.
        """
        # Start 8 processes to read the value of 'cyber'
        for i in range(8):
            process = multiprocessing.Process(target=self.db.get_value, args=('cyber',))
            process.start()
            self.processes.append(process)

        # Start a process to update the value of 'cyber'
        process1 = multiprocessing.Process(target=self.db.set_value, args=('cyber', 'fun'))
        process1.start()
        process1.join()  # Ensure the writer process completes before continuing

        # Start 8 more processes to read the updated value of 'cyber'
        for j in range(8):
            process = multiprocessing.Process(target=self.db.get_value, args=('cyber',))
            process.start()
            self.processes.append(process)

        # Wait for all processes to complete
        for p in self.processes:
            p.join()


if __name__ == "__main__":
    # Example usage of the Test class
    test = Test()
    test.number1()  # Set a value in the database
    test.number2()  # Retrieve a value from the database
    test.number3()  # Demonstrate reading and writing via multiprocessing
    test.number4()  # Another example of multiprocessing with read and write
    test.number5()  # Demonstrate launching multiple reader processes
    test.number6()  # Combine readers and writers in a complex multiprocessing example
